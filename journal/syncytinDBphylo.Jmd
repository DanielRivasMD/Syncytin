---
title :                    Syncytin Database analysis
author :                   Daniel Rivas
date :                     April 2021
---

```julia; echo = false
# load modules & functions
include("/Users/drivas/Factorem/Syncytin/src/phylogeny/syncytinDB.jl");
```

```julia; echo = false
# load syncytin library
begin

  # read sequences from file
  synPAr = syncytinReader(synDB = "syncytinLibrary.fasta", synDir = "/Users/drivas/Factorem/Syncytin/data/syncytinDB/protein/")
  synNAr = syncytinReader(synDB = "syncytinLibrary.fasta", synDir = "/Users/drivas/Factorem/Syncytin/data/syncytinDB/nucleotide/")

  # group syncytin sequences
  syngPDf = syncytinGroupReader(synG = "/Users/drivas/Factorem/Syncytin/data/syncytinDB/syncytinGroupsProt.csv")
  syngNDf = syncytinGroupReader(synG = "/Users/drivas/Factorem/Syncytin/data/syncytinDB/syncytinGroupsNucl.csv")
  # calculate distance & hierarchical clustering
  levAr = Symbol("levAr", d)
  levFile =  string("/Users/drivas/Factorem/Syncytin/data/syncytinDB/", db[ad], "/", "levenshteinDistance.tsv")
  @eval if isfile($levFile)
    $levAr = DelimitedFiles.readdlm($levFile)
  else
    $levAr = levenshteinDist(synPAr);
    DelimitedFiles.writedlm($levFile, $levAr, '\t')
  end

end;
```

# Database composition
We have constructed two syncytin databases based on collected evidence on NCBI. A protein database consisting of `j length(synPAr)` sequences and a nucleotide database composed of `j length(synNAr)`. We have manually assigned `j size(syngPDf, 1)` group labels according to sequence origin and accession.

```julia; echo = false, fig_cap = "Syncytin Protein Database"
# plot sequence length
synLenPlot(synPAr, syngPDf)
```

Next, we calculated the Levenshtein distance among sequences as a percentage of the longest sequence in each comparison and clustered using the group averge and optimal branch order.

```julia; echo = false
# calculate distance & hierarchical clustering
levPAr = levenshteinDist(synPAr);
```

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Protein space"
synLevHCPlot(levPAr, syngPDf)
```

We proceeded to exclude sequences which were not assigned to groups since they sporious results while clustering due to their different sequence length.

```julia; echo = false, fig_cap = "Syncytin Protein Database excluding non-assigned seqeuences"
# plot trimmed sequence length
synLenPlot(synPAr, syngPDf, trim = true)
```

We excluded sequences not assigned to groups. The remainding sequences were reclustered as follows.

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Protein space excluding non-assigned sequences"
# recalculate without unassigned sequences
synLevHCPlot(levPAr, syngPDf, trim = true, lenAr = buildLen(synPAr, syngPDf))
```

Finally, we use a similar methodology on nucleotide database as illustrated below.

```julia; echo = false, fig_cap = "Syncytin Nucleotide Database"
synLenPlot(synNAr, syngNDf)
```

```julia; echo = false
levNAr = levenshteinDist(synNAr);
```

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Nucleotide space"
synLevHCPlot(levNAr, syngNDf)
```

```julia; echo = false, fig_cap = "Syncytin Nucleotide Database excluding non-assigned seqeuences"
synLenPlot(synNAr, syngNDf, trim = true)
```

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Nucleotide space excluding non-assigned sequences"
synLevHCPlot(levNAr, syngNDf, trim = true, lenAr = buildLen(synNAr, syngPDf))
```
