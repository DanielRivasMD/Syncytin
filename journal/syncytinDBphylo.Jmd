---
title :                    Syncytin Database analysis
author :                   Daniel Rivas
date :                     April 2021
---

```julia; echo = false

# project
projDir = "/Users/drivas/Factorem/Syncytin"

# load project enviroment
using Pkg
if Pkg.project().path != string(projDir, "/Project.toml")
  Pkg.activate(projDir)
end

# load packages
begin
  using CSV
  using DelimitedFiles
end

# load modules
include(string(projDir, "/src/Utilities/syncytinDB.jl"));

```

```julia; echo = false

# run analysis on nucleotide & protein databases
import DelimitedFiles
db = [:nucleotide, :protein]
ad = 0

for d in [:N, :P]
  global ad += 1

  # load syncytin library

  # read sequences from file
  syncytinAr = Symbol("syncytinAr", d)
  @eval $syncytinAr = fastaReader(syncytinDB = string(projDir, "/data/syncytinDB/", db[ad], "/", "syncytinLibrary.fasta"))

  # group syncytin sequences
  syngDf = Symbol("syngDf", d)
  @eval $syngDf = CSV.read(synG = string(projDir, "/data/syncytinDB/", db[ad], "/", "syncytinGroups.csv"), DataFrame, header = false)

  # plot sequence length
  lenPlot = Symbol("lenPlot", d)
  @eval $lenPlot = syncytinLenPlot($syncytinAr, $syngDf)

  # calculate distance & hierarchical clustering
  levAr = Symbol("levAr", d)
  levFile =  string(projDir, "/data/syncytinDB/", db[ad], "/", "levenshteinDistance.tsv")
  @eval if isfile($levFile)
    $levAr = DelimitedFiles.readdlm($levFile)
  else
    $levAr = levenshteinDist($syncytinAr);
    DelimitedFiles.writedlm($levFile, $levAr, '\t')
  end

  # plot levenshtein distance & hierarchical clustering
  levPlot = Symbol("levPlot", d)
  @eval $levPlot = syncytinLevHPlot($levAr, $syngDf, $syncytinAr)

  # plot trimmed sequence length
  lenPlotTrim = Symbol("lenPlotTrim", d)
  @eval $lenPlotTrim = syncytinLenPlot($syncytinAr, $syngDf, trim = true)

  # recalculate without unassigned sequences
  levPlotTrim = Symbol("levPlotTrim", d)
  @eval $levPlotTrim = syncytinLevHPlot($levAr, $syngDf, $syncytinAr, trim = true)

end

```

# Database composition
We have constructed two syncytin databases based on collected evidence on NCBI. A protein database consisting of `j length(syncytinArP)` sequences and a nucleotide database composed of `j length(syncytinArN)`. We have manually assigned `j size(syngDfP, 1)` group labels according to sequence origin and accession.

```julia; echo = false, fig_cap = "Syncytin Protein Database"
lenPlotP
```

Next, we calculated the Levenshtein distance among sequences as a percentage of the longest sequence in each comparison and clustered using the group averge and optimal branch order.

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Protein space"
levPlotP
```

We proceeded to exclude sequences which were not assigned to groups since they sporious results while clustering due to their different sequence length.

```julia; echo = false, fig_cap = "Syncytin Protein Database excluding non-assigned seqeuences"
lenPlotTrimP
```

We excluded sequences not assigned to groups. The remainding sequences were reclustered as follows.

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Protein space excluding non-assigned sequences"
levPlotTrimP
```

Finally, we use a similar methodology on nucleotide database as illustrated below.

```julia; echo = false, fig_cap = "Syncytin Nucleotide Database"
lenPlotN
```

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Nucleotide space"
levPlotN
```

```julia; echo = false, fig_cap = "Syncytin Nucleotide Database excluding non-assigned seqeuences"
lenPlotTrimN
```

```julia; echo = false, fig_cap = "Syncytin Database hierarchical clustering on Nucleotide space excluding non-assigned sequences"
levPlotTrimN
```
